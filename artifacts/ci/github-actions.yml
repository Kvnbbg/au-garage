name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  id-token: write

jobs:
  lint:
    name: Lint & Formatting Gate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Flake8
        run: flake8 app tests
      - name: Verify import sorting
        run: |
          pip install isort==5.13.2
          isort --check-only app tests

  test:
    name: Unit & Integration Tests
    needs: lint
    runs-on: ubuntu-latest
    env:
      FLASK_ENV: testing
      DATABASE_URL: sqlite:///tmp/test.db
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Create instance directory
        run: mkdir -p instance tmp
      - name: Run database migrations
        run: |
          flask db upgrade
        env:
          FLASK_APP: run.py
      - name: Execute pytest with coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term-missing
      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
        env:
          CODECOV_TOKEN: \${{ secrets.CODECOV_TOKEN }}

  security:
    name: Static Application Security Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Bandit SAST scan
        run: bandit -r app -f json -o bandit-report.json
      - name: Upload SARIF to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-report.json

  build:
    name: Build Container Image
    needs: [test, security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: \${{ github.actor }}
          password: \${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ghcr.io/\${{ github.repository }}/app:\${{ github.sha }}
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: .
          output-file: sbom.spdx.json
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  deploy:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production
      url: \${{ steps.deploy.outputs.url }}
    steps:
      - name: Trigger ArgoCD sync
        id: deploy
        uses: distributhor/workflow-webhook@v3
        with:
          webhook_url: \${{ secrets.ARGOCD_SYNC_WEBHOOK }}
          data: '{"commit": "\${{ github.sha }}"}'
